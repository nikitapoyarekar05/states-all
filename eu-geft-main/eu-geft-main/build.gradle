import org.springframework.boot.gradle.plugin.SpringBootPlugin

buildscript {
    ext {
        springBootVersion = '2.3.1.RELEASE'
        kotlinVersion = '1.4.0'
        javaVersion = 11
    }
}

plugins {
    id 'org.springframework.boot' version "${springBootVersion}"
    id 'gradle-boost' version '2.1.0'
    id 'jacoco'
    id 'org.sonarqube' version '3.0'
    id 'com.github.pivotalservices.cf-app' version '2.3.0-rc.6'
    id 'org.jetbrains.kotlin.jvm' version "${kotlinVersion}"
    id 'org.jetbrains.kotlin.plugin.spring' version "${kotlinVersion}"
    id 'org.jetbrains.kotlin.plugin.allopen' version "${kotlinVersion}"
    id "com.ford.quartermaster" version '1.3.15'
    id 'idea'

    // To be confirmed if all these are needed
    id "com.moowork.node" version "1.3.1"
    id 'java'
    id 'io.spring.dependency-management' version '1.0.9.RELEASE'
}

group = 'com.ford'
version = '0.0.1-SNAPSHOT'
archivesBaseName = 'eu-geft'
sourceCompatibility = "${javaVersion}"

jacoco {
    toolVersion = '0.8.3'
}

jacocoTestReport {
    reports {
        xml.enabled true
        xml.destination file("${buildDir}/jacoco-xml/jacoco.xml")
        html.destination file("${buildDir}/jacoco-html")
    }
}

// Since you are using the quartermaster plugin, the plugin repositories are located in settings.gradle
repositories {
    mavenCentral()
    maven { url 'https://repo.spring.io/milestone' }
    maven { url 'https://repo.spring.io/snapshot' }
    maven { url "https://www.nexus.ford.com/repository/external-proxy-group/" }
    maven { url "https://www.nexus.ford.com/repository/public" }
}

configurations {
    developmentOnly
    runtimeClasspath {
        extendsFrom developmentOnly
    }
}

dependencies {
    testImplementation 'org.junit.jupiter:junit-jupiter-api'
    testImplementation('org.springframework.boot:spring-boot-starter-test') {
        exclude group: 'org.junit.vintage', module: 'junit-vintage-engine'
    }
    testImplementation 'com.nhaarman.mockitokotlin2:mockito-kotlin:2.2.0'
    testImplementation('com.github.tomakehurst:wiremock:2.24.1') {
        exclude group: 'junit', module: 'junit'
    }
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine'
    testImplementation group: 'org.springframework.security', name: 'spring-security-test', version: '5.1.5.RELEASE'
    testImplementation group: 'org.skyscreamer', name: 'jsonassert', version: '1.5.0'
    testImplementation group: 'com.approvaltests', name: 'approvaltests', version: '9.3.0'

    implementation 'org.springframework.boot:spring-boot-starter'
    implementation 'org.springframework.boot:spring-boot-starter-validation'
    implementation 'org.jetbrains.kotlin:kotlin-stdlib'
    implementation 'org.jetbrains.kotlin:kotlin-reflect'
    implementation platform(SpringBootPlugin.BOM_COORDINATES) {
        exclude group: 'junit', module: 'junit'
    }
    implementation platform('org.springframework.cloud:spring-cloud-dependencies:Hoxton.SR5')
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'com.fasterxml.jackson.module:jackson-module-kotlin:2.11.+'
    implementation 'org.springframework.cloud:spring-cloud-starter-oauth2'
    //implementation 'com.ford.cloudnative:activedirectory-spring-oauth2-client:1.1.2-RELEASE'
    implementation "org.springframework.boot:spring-boot-starter-oauth2-resource-server:${springBootVersion}"
    implementation 'org.springframework.cloud:spring-cloud-starter-config:2.2.3.RELEASE'
    implementation 'org.apache.httpcomponents:httpclient:4.5'

    implementation 'com.ford.mpp.pe.sre:metrics:2.0.0'
    implementation 'org.springframework.boot:spring-boot-starter-actuator'
    implementation 'org.springframework.cloud:spring-cloud-starter-sleuth'
    implementation 'io.springfox:springfox-boot-starter:3.0.0'
    implementation platform("io.pivotal.spring.cloud:spring-cloud-services-dependencies:2.1.1.RELEASE")
    implementation "io.pivotal.spring.cloud:spring-cloud-services-starter-config-client:2.1.1.RELEASE"
    localOnly 'org.springframework.cloud:spring-cloud-config-server:2.2.3.RELEASE'

    implementation 'com.jayway.jsonpath:json-path:2.0.0'

    // Used for JSON logging format
    implementation 'net.logstash.logback:logstash-logback-encoder:6.4'

    implementation "net.jodah:failsafe:2.4.0"

    // To be confirmed if these are needed:
    implementation 'org.projectlombok:lombok:1.18.12'
    annotationProcessor 'org.projectlombok:lombok:1.18.12'
    implementation 'org.springframework.boot:spring-boot-starter-thymeleaf'
    implementation 'com.auth0:java-jwt:3.8.1'
    implementation 'com.auth0:jwks-rsa:0.9.0'
    implementation 'commons-codec:commons-codec:1.15'
    developmentOnly 'org.springframework.boot:spring-boot-devtools'
    implementation group: 'com.twilio.sdk', name: 'twilio', version: '9.0.1'
}

sonarqube {
    properties {
        property 'sonar.host.url', 'http://www.sonarqube.ford.com'
        property 'sonar.projectName', 'EU-GEFT'
        property 'sonar.projectKey', 'EuGeft'
        property 'sonar.analysis.mode', 'publish'
//        property 'sonar.password', '' waiting for information
//        property 'sonar.exclusions', ''
        property 'sonar.exclusions', '**/__mock__/**, **/coverage/**, **/build/**, **/public/**, **/webpack.config.js, **/cypress/**, **/node_modules/**, src/main/webapp/src/serviceWorker.ts, src/main/webapp/src/setupTests.ts'
        property 'sonar.sources', "src/main/webapp, src/main/kotlin, src/main/java"
        property 'sonar.coverage.exclusions', '**/*.test.ts,**/*.test.tsx,**/*.test.js'
        property 'sonar.c.file.suffixes', '-'
        property 'sonar.cpp.file.suffixes', '-'
        property 'sonar.objc.file.suffixes', '-'
        property 'sonar.java.coveragePlugin', 'jacoco'
        property 'sonar.javascript.lcov.reportPaths', './src/main/webapp/coverage/lcov.info'
        property 'sonar.scm.disabled', 'True'
        property 'sonar.scm.provider', 'git'
        property 'sonar.login', 'cff18629faf4989eea73aad6c681020487419577'
        property 'sonar.coverage.jacoco.xmlReportPaths', "${buildDir}/jacoco-xml/jacoco.xml"
    }
}

tasks['sonarqube'].dependsOn 'build'

tasks.withType(Test) {
    finalizedBy('jacocoTestReport')
}

tasks.withType(Test) {
    useJUnitPlatform()
}

tasks.withType(org.jetbrains.kotlin.gradle.tasks.KotlinCompile).configureEach {
    kotlinOptions {
        freeCompilerArgs = ['-Xjsr305=strict', '-Werror']
        jvmTarget = javaVersion
    }
}

node {
    download = false

    // Set the work directory for unpacking node
    workDir = file("${project.buildDir}/nodejs")

    // Set the work directory for NPM
    npmWorkDir = file("${project.buildDir}/npm")

//    yarnWorkDir = file("${project.buildDir}/yarn")
}

task appNpmInstall(type: NpmTask) {
    description = "Installs all dependencies from package.json"
    workingDir = file("${project.projectDir}/src/main/webapp")
    args = ["install"]
}

task appNpmTest(type: NpmTask) {
    workingDir = file("${project.projectDir}/src/main/webapp")
    args = ["test", "--", "--watchAll=false"]
}

task appNpmBuild(type: NpmTask) {
    description = "Builds production version of the webapp"
    workingDir = file("${project.projectDir}/src/main/webapp")
    args = ["run", "build"]
}

task appWebpackBuild(type: NpmTask) {
    description = "Builds production version of the webapp using webpack"
    workingDir = file("${project.projectDir}/src/main/webapp")
    args = ["run", "build-webpack"]
}

task copyWebApp(type: Copy) {
    from 'src/main/webapp/build'
    into 'build/resources/main/static/.'
}

task copyWebpackBuild(type: Copy){
    from 'src/main/webapp/dist'
    into 'src/main/resources/static/'
}

clean {
    delete 'src/main/webapp/build'
    delete 'src/main/webapp/node_modules'
}

task moveIndex {
    doLast {
        ant.move file: "build/resources/main/static/index.html",
                todir: "src/main/resources/templates"
    }
}

task moveWebpackIndex {
    doLast {
        ant.move file: "src/main/resources/static/gb/index.html",
                todir: "src/main/resources/templates/gb"
    }
}

task runLocal() {
    appNpmBuild.doFirst {
        environment = ['REACT_APP_SHOW_DEV_TOOLS': true]
    }

    finalizedBy bootRun
}

appWebpackBuild.dependsOn appNpmInstall
copyWebpackBuild.dependsOn appWebpackBuild
moveWebpackIndex.dependsOn copyWebpackBuild
compileJava.dependsOn moveWebpackIndex

appNpmBuild.dependsOn appNpmInstall
copyWebApp.dependsOn appNpmBuild
moveIndex.dependsOn copyWebApp
compileJava.dependsOn moveIndex

cfConfig {
    def env = System.getenv("PCF_ENV_NAME") ?: "dev" // eg: dev, qa, edu, prod
    def buildName = System.getenv("PCF_NAME") ?: "dev" // eg: dev, qa, edu, uat, prod
    def cluster = System.getenv("PCF_CLUSTER_NAME") ?: "EDC1" // eg: EDC1, EDC2
    def orgSuffix = System.getenv("PCF_ORG_SUFFIX") ?: "Preprod" // Preprod | Prod
    def ccHostPrefix = System.getenv("PCF_CC_HOST_PREFIX") ?: "pp01" // pp01 | pd01

    // See GettingStarted.md for information on updating these values
    ccHost = "api.sys.${ccHostPrefix}.${cluster}.cf.ford.com".toLowerCase()
    space = "IAL-${env}"
    org = "GPRS_IAL_${cluster}_${orgSuffix}"
    name = "ial-finance-credit-${buildName}".toLowerCase()
    routes = [
            "ial-finance-credit-${buildName}.apps.${ccHostPrefix}i.${cluster}.cf.ford.com".toLowerCase(),
            // the route should be mapped to something like this:
            // preprod : apps.edcpp02.cf.ford.com
            // prod : apps.edcpd02.cf.ford.com
            "ial-finance-credit-${buildName}.apps.edc${ccHostPrefix.substring(0, 3)}2.cf.ford.com".toLowerCase()
    ]
    memory = 1024
    instances = 1
    buildpack = "java_buildpack_offline"
    filePath = jar.getArchiveFile().get().asFile.absolutePath

    services = [
            "ial-finance-credit-${env}-config-server".toString(),
            "ial-${env}-splunk".toString()
	]

    def nonProxyHosts = '"localhost|127.0.0.1|19.0.0.0/8|10.0.0.0/8|172.16.0.0/12|*.ford.com"'
    def proxyHost = 'internet.ford.com'
    def proxyPort = '83'

    environment = [
            'JBP_CONFIG_OPEN_JDK_JRE': "{ jre: { version: ${javaVersion}.+ } }".toString(),
            'JAVA_OPTS'              : "-Dhttps.proxyHost=$proxyHost -Dhttps.proxyPort=$proxyPort -Dhttps.nonProxyHosts=$nonProxyHosts -Dhttp.proxyHost=$proxyHost -Dhttp.proxyPort=$proxyPort -Dhttp.nonProxyHosts=$nonProxyHosts".toString(),
            'SPRING_PROFILES_ACTIVE' : "${buildName}".toString()
    ]
}
