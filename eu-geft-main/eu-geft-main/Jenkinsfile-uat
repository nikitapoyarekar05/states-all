final String genericCredentialId = "eu-geft-jenkins"
final String githubRepo = "git@github.ford.com:global-ecommerce-finance-tech/eu-geft.git"

pipeline {
    agent any

    options {
        parallelsAlwaysFailFast()
    }

    environment {
        def cfCliTool = tool name: 'cf_cli_7_2_0', type: 'com.cloudbees.jenkins.plugins.customtools.CustomTool'
        CF_HOME = "$WORKSPACE"

        def CHROME_PATH = tool name: 'chrome_88', type: 'com.cloudbees.jenkins.plugins.customtools.CustomTool'
        def FIREFOX_PATH = tool name: 'firefox_91', type: 'com.cloudbees.jenkins.plugins.customtools.CustomTool'
        def NODEJS_HOME = "${tool 'NodeJS_14'}"
        PATH = "${NODEJS_HOME}:${cfCliTool}:${CHROME_PATH}:${FIREFOX_PATH}:${env.PATH}"

        no_proxy = "localhost,127.0.0.1,19.0.0.0/8,10.0.0.0/8,172.16.0.0/12,.ford.com"
        NO_PROXY = "localhost,127.0.0.1,19.0.0.0/8,10.0.0.0/8,172.16.0.0/12,.ford.com"
        https_proxy = "http://internet.ford.com:83"
        http_proxy = "http://internet.ford.com:83"
        HTTPS_PROXY = "http://internet.ford.com:83"
        HTTP_PROXY = "http://internet.ford.com:83"

        NEXUS_SERVER        = "www.nexus.ford.com"
        REPO                = "GEFT-State_private_raw_repository"
        ARTIFACT_ID         = "eu-geft-finapp"
        GROUP_ID            = "com/ford"
        ARTIFACT_DIRECTORY  = "build/libs/"
        ARTIFACT_BUILD_PATH = "${ARTIFACT_DIRECTORY}/eu-geft-0.0.1-SNAPSHOT.jar"
        DATE_TAG = java.time.LocalDate.now()
        DATETIME_TAG = java.time.LocalDateTime.now()    
    }
    parameters {
        gitParameter branchFilter   : 'origin/(.*)',
        defaultValue                : 'release',
        name                        : 'BRANCH',
        type                        : 'PT_BRANCH'
        booleanParam(
        name                   : 'BUILD_NEXUS_ARTIFACT',
        defaultValue           : false,
        description            : 'Uncheck to skip build from nexus artifact'
        )
        string(
        defaultValue           : 'null', 
        name                   : 'DATE_TIME', 
        trim                   : true
        )
        booleanParam(
        name                   : 'RUN_UNIT_TEST_BUILD',
        defaultValue           : true,
        description            : 'Uncheck to skip run unit test and build'
        )
  }
    stages{
        stage('Run Unit Tests and then Build') {
            when { expression { params.RUN_UNIT_TEST_BUILD } }
                steps {
                    dir('./src/main/webapp') {
                        nodejs('NodeJS_14') {
                            ansiColor('xterm') {
                                sh label: 'npm install', script: 'npm ci'
                                sh label: 'npm test-build-ci', script: 'npm run test-build-ci'
                                sh label: 'npm build', script: 'REACT_APP_SHOW_DEV_TOOLS=true npm run build-webpack'
                            }
                        }
                    }

                    sh './gradlew build --exclude-task appNpmBuild --exclude-task appWebpackBuild'
                }
            }
            stage('Pull the artifact off Nexus') {
                when { expression { params.BUILD_NEXUS_ARTIFACT } }
                    steps {
                        withCredentials([usernamePassword(credentialsId: 'GEFT01_Nexus', usernameVariable: 'USERNAME', passwordVariable: 'PASSWORD')]) {
                            sh('''
                            mkdir -p ${WORKSPACE}/build/libs
                            cd ${WORKSPACE}/build/libs
                            rm -rf *.jar
                            curl -v -u ${USERNAME}:${PASSWORD} \
                            -o ${WORKSPACE}/build/libs/eu-geft-finapp-$DATE_TIME.jar \
                            https://www.nexus.ford.com/repository/GEFT-State_private_raw_repository/release/com/ford/eu-geft-finapp/$DATE_TIME/eu-geft-finapp-$DATE_TIME.jar
                            mv eu-geft-finapp-*.jar eu-geft-0.0.1-SNAPSHOT.jar
                            ''')
                    }
                }
            }  
            stage("Deploy to UAT EDC1") {
                    steps {
                        script {
                            deployToEnv('uat', 'uat', false, false, 'EDC1')
                        }
                    }
                }
            stage("Deploy to UAT EDC2") {
                steps {
                    script {
                        deployToEnv('uat', 'uat', false, false, 'EDC2')
                    }
                }
            }
        stage('Install Smoke Test Dependencies') {
            steps {
                dir('smoke-tests') {
                    nodejs('NodeJS_14') {
                        ansiColor('xterm') {
                            sh "npm install -g newman"
                            sh label: "Install", script: "npm ci"
                        }
                    }
                }
            }
        }
        // stage('Run Smoke Tests against UAT') {
        //     steps {
        //         script {
        //             runSmokeTests("UAT")
        //         }
        //     }
        // }
        stage('Publish To Nexus') {
            steps {
                script {
                    nexusArtifactUploader credentialsId: 'GEFT01_Nexus',
                            groupId: 'com.ford',
                            nexusUrl: "${env.NEXUS_SERVER}",
                            nexusVersion: 'nexus3',
                            protocol: 'https',
                            repository: "${env.REPO}/${params.BRANCH}",
                            artifacts: [[
                              artifactId: "$env.ARTIFACT_ID",
                              classifier: '',
                              file: "${WORKSPACE}/build/libs/eu-geft-0.0.1-SNAPSHOT.jar",
                              type: 'jar'
                            ]],
                            version: "${env.DATETIME_TAG}"
                }
            }
        }
    }
    post {
        always {
            script {
                if (params.RUN_UNIT_TEST_BUILD == true )
                step([$class: 'JUnitResultArchiver', testResults: 'smoke-tests/reports/*.xml,build/test-results/**/*.xml,src/main/webapp/junit.xml'])
                archiveArtifacts allowEmptyArchive: true, artifacts: 'smoke-tests/screenshots/**/*.png,build/libs/*.jar', followSymlinks: false
                cleanWs()
            }
        }
    }
}

def runSmokeTests(deployEnv) {
    nodejs('NodeJS_14') {
        ansiColor('xterm') {
            dir('smoke-tests') {
                retry(2) {
                    sh label: "Run Tests", script: "DEPLOYMENT_ENV=${deployEnv} npm run test-ci"
                }
            }
        }
    }
}

def deployToEnv(envName = 'uat', name = 'uat', prod = false, rolling = true, clusterName = 'EDC1') {
    def orgSuffix = prod ? 'Prod' : 'Preprod'
    def ccHostPrefix = prod ? 'pd01' : 'pp01'
    env.PCF_ENV_NAME = envName
    env.PCF_NAME = name
    env.PCF_ORG_SUFFIX = orgSuffix
    env.PCF_CC_HOST_PREFIX = ccHostPrefix
    env.PCF_CLUSTER_NAME = clusterName

    deployToPcf(rolling)
}

def deployToPcf(rolling = true) {
    withCredentials(
            [usernamePassword(credentialsId: 'geft01', passwordVariable: 'CF_CCPASSWORD', usernameVariable: 'CF_CCUSER'),
             file(credentialsId: 'eu-geft-config-server', variable: 'PRIVATE_KEY_FILE')]) {
        echo 'Pushing to $PCF_CLUSTER_NAME $PCF_NAME'

        setupConfigServer()
        deploy(rolling)
        autoScaleApplication()
    }
}

def setupConfigServer() {
    sh './jenkins-config-server-setup.sh $PCF_CLUSTER_NAME'
}

def deploy(rolling) {
    retry(2) {
        if (rolling) {
            sh './jenkins-deploy-to-pcf.sh $PCF_CLUSTER_NAME "rolling"'
        } else {
            sh './jenkins-deploy-to-pcf.sh $PCF_CLUSTER_NAME'
        }
    }
}

def autoScaleApplication() {
    echo 'Setup Autoscaling for $PCF_CLUSTER_NAME $PCF_NAME'

    sh 'chmod a+x jenkins-auto-scaling-setup.sh'
    sh './jenkins-auto-scaling-setup.sh $PCF_CLUSTER_NAME'
}
